//Brute Force Time Complexity: O(L)+O(L-N), Space Complexity: O(1).

 ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (head == NULL) {
            return NULL;
        }
        ListNode* temp = head;
        int cnt = 0;
        while (temp != NULL) {
            cnt++;
            temp = temp->next;
        }
        if (cnt == n) {
            ListNode* newHead = head->next;
            delete (head);
            return newHead;
        }
        int res = cnt - n;
        
        temp = head;
        while (temp != NULL) {
            res--;
            if(res==0) break;
            temp=temp->next;
        }
        ListNode* deleteNode=temp->next;
        temp->next=temp->next->next;
        delete(deleteNode);
        return head;
    }

//Optimal Approach Time Complexity: O(N), Space Complexity: O(1).

ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* slow = head;
        ListNode* fast = head;
        for (int i = 0; i < n; i++) {
            fast = fast->next;
            if (fast == NULL)
                return head->next;
        }
        while (fast->next != NULL) {
            fast = fast->next;
            slow = slow->next;
        }

        ListNode* deleteNode=slow->next;
        slow->next=slow->next->next;
        delete deleteNode;
        return head;

    }
