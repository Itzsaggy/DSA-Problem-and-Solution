// Brute Force Approach

 int rowWithMax1s(vector<vector<int> > &arr) {
        // code here
       int ind = -1;
    int max_cnt = 0;
    
    for (int i = 0; i < arr.size(); i++) {
        int cnt_row = 0;
        for (int j = 0; j < arr[i].size(); j++) {  // corrected 'i++' to 'j++'
            cnt_row += arr[i][j];
        }
        
        
        if (cnt_row > max_cnt) {
            max_cnt = cnt_row;
            ind = i;
        }
    }
    return ind;
    }

//Optimal Approach

int lowerBound(vector<int> &arr, int n, int x) {
    int low = 0, high = n - 1;
    int ans = n;  // if no element is >= x, it will return n
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] >= x) {  // fixed to compare arr[mid] with x
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return ans;
}

int rowWithMax1s(vector<vector<int>> &arr) {
    int ind = -1;
    int max_cnt = 0;
    int n = arr.size();
    if (n == 0) return -1;  // handle edge case where arr is empty
    int m = arr[0].size();

    for (int i = 0; i < n; i++) {
        int cnt_one = m - lowerBound(arr[i], m, 1);  // target is 1
        if (cnt_one > max_cnt) {
            max_cnt = cnt_one;
            ind = i;
        }
    }
    return ind;
    }
