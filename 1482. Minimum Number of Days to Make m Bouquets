// BRUTE FORCE 
int possible(vector<int>& bloomDay, int day, int m, int k){
       int cnt=0;
       int  noOfbo=0;
       for(int i=0;i<bloomDay.size(); i++){
        if(bloomDay[i]<=day){
            cnt++;
        }
        else{
            noOfbo+=cnt/k;
            cnt=0;
        }

       }
     noOfbo += (cnt / k);
    return noOfbo >= m;
    }
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n = bloomDay.size();
        if(n<m*k) return -1;
         int mini = INT_MAX, maxi = INT_MIN;
    for (int i = 0; i < n; i++) {
        mini = min(mini, bloomDay[i]);
        maxi = max(maxi, bloomDay[i]);
    }

    for(int i= mini; i<=maxi; i++){
        if (possible(bloomDay, i, m, k))
            return i;
    }
    return -1;
    }


  // OPTIMAL APPROACH

   int possible(vector<int>& bloomDay, int day, int m, int k) {
        int cnt = 0;
        int noOfbo = 0;
        for (int i = 0; i < bloomDay.size(); i++) {
            if (bloomDay[i] <= day) {
                cnt++;
            } else {
                noOfbo += cnt / k;
                cnt = 0;
            }
        }
        noOfbo += (cnt / k);
        return noOfbo >= m;
    }

public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n = bloomDay.size();
         long long val = m * 1ll * k * 1ll;
    if (val > n) return -1;
        int mini = INT_MAX, maxi = INT_MIN;
        for (int i = 0; i < n; i++) {
            mini = min(mini, bloomDay[i]);
            maxi = max(maxi, bloomDay[i]);
        }
        int low = mini, high = maxi;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (possible(bloomDay, mid, m, k)) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
