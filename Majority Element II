// brute Force Approach O(n2) time compl.

vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        vector<int> ls;

        for(int i=0; i<n; i++){
            if(ls.size()==0 || ls[0]!=nums[i])
            {
                int cnt=0;
                for(int j=0; j<n; j++)
                {
                    if(nums[j]==nums[i])
                    cnt++;
                }
                if(cnt>(n/3)){
                    ls.push_back(nums[i]);
                }
                
            }
            if(ls.size()==2) break;
        }
        return ls;
    }



// Using Hashmap 
//we can reduce the time complexity from o(n2) to O(n) Using hashap but Space Complexity Increases to O(n) so we need to optimize the solution

 vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        map<int,int> mpp;
        vector<int> ls;
        int mini = int(n/3)+1;

        for(int i=0; i<n; i++){
            mpp[nums[i]]++;

            if(mpp[nums[i]]==mini)
            {
                ls.push_back(nums[i]);
            }

            if(ls.size()==2) break;
        }
        return ls;
    }


// Optimal Approach (Extended Boyer Mooreâ€™s Voting Algorithm): T.C O(n) and S.C O(1)

vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();

        int cnt1 = 0, cnt2 = 0;
        int el1 = INT_MIN; 
        int el2 = INT_MIN;

        for (int i = 0; i < n; i++) {
            if (cnt1 == 0 && el2 != nums[i]) {
                cnt1++;
                el1 = nums[i];
            } else if (cnt2 == 0 && el1 != nums[i]) {
                cnt2++;
                el2 = nums[i];
            } else if (nums[i] == el1)
                cnt1++;
            else if (nums[i] == el2)
                cnt2++;
            else {
                cnt1--, cnt2--;
            }
        }

        vector<int> ls;
        cnt1 = 0, cnt2 = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] == el1)
                cnt1++;
            if (nums[i] == el2)
                cnt2++;
        }
        int mini = int(n / 3) + 1;
        if (cnt1 >= mini)
            ls.push_back(el1);
        if (cnt2 >= mini)
            ls.push_back(el2);

        return ls;
    }
