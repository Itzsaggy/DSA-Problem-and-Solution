//Brute force approach(linera Search)

int studentCount(vector<int>&arr, int pages)
{
    int n = arr.size(); 
    int students = 1;
    long long pagesStudent = 0;

    for(int i=0;i<n; i++){
         if(pagesStudent+arr[i]<=pages){
        pagesStudent+=arr[i];

    }
    else{
        students++;
        pagesStudent=arr[i];
    }
    }
     return students;

   
}

int findPages(vector<int>& arr, int n, int m) {
      if (m > n) return -1;
    int low=*max_element(arr.begin(),arr.end());
    int high = accumulate(arr.begin(),arr.end(),0);

    for(int pages=low;pages<=high;pages++){
          if (studentCount(arr, pages) == m) {
            return pages;
        }
    }
    return low;
    }


//Binary Search Approach
int studentCount(vector<int>&arr, int pages)
{
    int n = arr.size(); 
    int students = 1;
    long long pagesStudent = 0;

    for(int i=0;i<n; i++){
         if(pagesStudent+arr[i]<=pages){
        pagesStudent+=arr[i];

    }
    else{
        students++;
        pagesStudent=arr[i];
    }
    }
     return students;

   
}

int findPages(vector<int>& arr, int n, int m) {
      if (m > n) return -1;
    int low=*max_element(arr.begin(),arr.end());
    int high = accumulate(arr.begin(),arr.end(),0);

    while(low<=high){
        int mid=(low+high)/2;
        int student=studentCount(arr, mid);
        if(student>m)
        {
            low=mid+1;
        }
        else{
            high=mid-1;
        }
    }
    return low;
    }
    

    
