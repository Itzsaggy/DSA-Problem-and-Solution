// Naive Approach with linear Search with O(n) TC

  vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();

        int first=-1,last=-1;
        for(int i=0;i<n; i++){
            if(nums[i]==target){
                if(first==-1) 
                first=i;
                last=i;
            }
        }
        return{first,last};
    }

//Optimal approach with O(log n) TC

class Solution {
    private:
    int lowerBound(vector<int>& nums, int target){
        int low = 0, high = nums.size() - 1;
        int ans = nums.size();  

        while(low <= high){
            int mid = (low + high) / 2;
            if(nums[mid] >= target){  
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }

    int upperBound(vector<int>& nums, int target){
        int low = 0, high = nums.size() - 1;
        int ans = nums.size();  

        while(low <= high){
            int mid = (low + high) / 2;
            if(nums[mid] > target){  
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }

    public:
    vector<int> searchRange(vector<int>& nums, int target) {

        int lower = lowerBound(nums, target);
        if(lower == nums.size() || nums[lower] != target)
            return {-1, -1};
        int upper = upperBound(nums, target) - 1;

        return {lower, upper};
    }
};
