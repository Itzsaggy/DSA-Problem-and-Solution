// Approach 1: Time Complexity: O(NlogN) 
string frequencySort(string s) {
        vector<int> freq(128,0);
        for(auto ch: s) freq[ch]++;\

        auto cmp = [&](char a, char b){
            if(freq[a]==freq[b]) return a<b;
            return freq[a]>freq[b];
        };

        sort(s.begin(),s.end(),cmp);
        return s;
    }

//Approach 2: Time Complexity: O(KlogN) 

string frequencySort(string s) {
       unordered_map<char,int> freq;
       for(auto ch:s) freq[ch]++;

       vector<pair<char,int>> freqArr;
       for(auto[ch,fq]:freq) freqArr.push_back({ch,fq});

       auto cmp=[&](pair<char,int>&a,pair<char,int> &b){
        return a.second>b.second;
       };

       sort(freqArr.begin(),freqArr.end(),cmp);

       string ans="";
        for(auto[ch,fq]:freqArr) ans.append(fq,ch);
        return ans;
    }
